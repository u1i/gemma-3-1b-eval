{
  "stream": "consistency",
  "category": "Computer Science A",
  "question": "What is a binary search?",
  "answer": "Okay, let's break down what a binary search is in computer science.\n\n**What is a Binary Search?**\n\nA binary search is a highly efficient algorithm for finding a specific value (the \"target\") within a *sorted* array or list.  It works by repeatedly dividing the search interval in half. Here's the core idea:\n\n1. **Prerequisite: Sorted Data:**  Binary search *only* works on data that is already sorted (usually in ascending order, but can be adapted for descending). This is a crucial requirement!\n\n2. **Start in the Middle:**  Begin by examining the element in the middle of the sorted array.\n\n3. **Compare:**\n   * **If the middle element is equal to the target:** You've found it! The search is complete.\n   * **If the target is less than the middle element:**  The target, if it exists, must be in the *left* half of the array. Discard the right half and repeat the search on the left half.\n   * **If the target is greater than the middle element:** The target, if it exists, must be in the *right* half of the array. Discard the left half and repeat the search on the right half.\n\n4. **Repeat:** Continue this process of dividing the search interval in half until either:\n   * The target is found.\n   * The search interval is empty (meaning the target is not present in the array).\n\n\n\n**Here's a simple example:**\n\nLet's say you have the sorted array:  `[2, 5, 7, 8, 11, 12]` and you're searching for the number `11`.\n\n1. **Middle element:** The middle element is `8` (index 3).\n2. **Compare:** `11` is greater than `8`.\n3. **New interval:**  Discard the left half (`[2, 5, 7, 8]`).  Now your search is limited to `[11, 12]`.\n4. **Middle element:** The middle element is `11` (index 4).\n5. **Compare:** `11` is equal to `11`.\n6. **Found!**  The target is found at index 4.\n\n\n\n**Why is Binary Search Efficient?**\n\nBinary search is significantly faster than a linear search (checking each element one by one) for large arrays.  Its efficiency is due to the fact that it eliminates half of the remaining search space with each comparison. \n\n* **Time Complexity:** The time complexity of binary search is **O(log n)**, where *n* is the number of elements in the array. This means the number of operations grows logarithmically with the size of the array.  For example, if you double the size of the array, the number of steps required for binary search only increases by one.  This is *much* better than linear search's O(n) time complexity.\n\n* **Space Complexity:** The space complexity of a standard iterative binary search is **O(1)** (constant space) because it only uses a few variables to store the start, end, and middle indices.  A recursive implementation can have O(log n) space complexity due to function call overhead.\n\n\n\n**Pseudocode (Iterative Version):**\n\n```\nfunction binarySearch(array, target):\n  left = 0\n  right = length(array) - 1\n\n  while left <= right:\n    mid = (left + right) // 2  // Integer division\n\n    if array[mid] == target:\n      return mid  // Target found at index mid\n    else if array[mid] < target:\n      left = mid + 1  // Search in the right half\n    else:\n      right = mid - 1 // Search in the left half\n\n  return -1  // Target not found\n```\n\n**Pseudocode (Recursive Version):**\n```\nfunction binarySearchRecursive(array, target, left, right):\n  if left > right:\n    return -1 // Target not found\n\n  mid = (left + right) // 2\n\n  if array[mid] == target:\n    return mid\n  else if array[mid] < target:\n    return binarySearchRecursive(array, target, mid + 1, right)\n  else:\n    return binarySearchRecursive(array, target, left, mid - 1)\n```\n\n**Key Takeaways:**\n\n* **Requires sorted data.**\n* **Divides the search space in half with each step.**\n* **Time complexity: O(log n)** \u2013 very efficient for large datasets.\n* **Space complexity: O(1) (iterative) or O(log n) (recursive).**\n\n\n\nIs there anything specific about binary search you'd like me to elaborate on?  Perhaps you'd like to see example code in a particular programming language (Python, Java, C++, etc.), or a discussion of its limitations (like needing sorted data)?  Just let me know.",
  "index": 13
}